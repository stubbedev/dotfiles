#!/bin/bash

function info {
  echo "WELCOME TO THE STUBBEDEV DOTFILES INSTALLER"
  echo "Make sure you have the following installed before you run this util:"
  echo "tmux  :: Terminal Multiplexer"
  echo "zsh   :: POSIX Shell"
  install
}

function install {
  echo "Please enter your desired option:"
  read -rn 1 -p "Install (A)ll, (I)nstall Mandatory or (C)ancel?" REPLY
  printf "\n"
  case "$REPLY" in
  a | A )
    install_mandatory
    install_optional
    exit
    ;;
  m | M | i | I )
    install_mandatory
    exit
    ;;
  c | C )
    echo "Cancelling!"
    exit
    ;;
  *)
    info
    exit
    ;;
  esac
}

function install_mandatory {
  imports
  install_links
  install_fonts
  install_zsh
  install_tmux
  install_intelephense_license
  install_clerk_credentials
  install_regolith_Xresources
  install_picom
}

function install_optional {
  install_st
  install_wezterm
  install_nvim
  install_i3
  install_golang
}

function imports {
  SCRIPT_DIR="$(dirname "$(dirname "$(readlink -f "$0")")")"
  source "$SCRIPT_DIR/src/zsh/funcs"
}

function install_links {
  echo "Creating Directory $HOME/.stubbe/"

  mkdir -p "$HOME/.stubbe"
  ln -sf "$SCRIPT_DIR/bin" "$HOME/.stubbe"
  ln -sf "$SCRIPT_DIR/src" "$HOME/.stubbe"

  export STUBBE_SRC="$HOME/.stubbe/src"
}

function install_st {
  echo "Installing ST TERMINAL"
  ln -sf "$SCRIPT_DIR/src/st/st" "$SCRIPT_DIR/bin"
}

function install_wezterm {
  SOURCE_WEZTERM="$STUBBE_SRC/wezterm"
  mkdir -p "$HOME/.config/wezterm"
  ln -sf "$SOURCE_WEZTERM/wezterm.lua" "$HOME/.config/wezterm"
}

function install_i3 {
  echo "Installing i3 CONFIG"

  SOURCE_I3="$STUBBE_SRC/i3/config"
  mkdir -p "$HOME/.config/i3"
  touch "$HOME/.config/i3/config"
  if ! has_string "$SOURCE_I3" "$HOME/.config/i3/config"; then
    echo "include $SOURCE_I3" >>"$HOME/.config/i3/config"
  fi
}

function install_i3status {
  echo "Installing i3status"

  SOURCE_I3STATUS="$STUBBE_SRC/i3status/config"
  mkdir -p "$HOME/.config/i3status"
  touch "$HOME/.config/i3status/config"
  cat "$SOURCE_I3STATUS" >>"$HOME/.config/i3status/config"
}

function install_picom {
  echo "Installing picom config"

  SOURCE_PICOM="$STUBBE_SRC/picom/picom.conf"
  mkdir -p "$HOME/.config/picom"
  ln -sf "$SOURCE_PICOM" "$HOME/.config/picom"
}

function install_zsh {
  echo "Installing ZSH CONFIG"

  SOURCE_ZSH="$STUBBE_SRC/zsh/init"
  touch "$HOME/.zshrc"
  if ! has_string "$SOURCE_ZSH" "$HOME/.zshrc"; then
    echo "source $SOURCE_ZSH" >>"$HOME/.zshrc"
  fi
  eval "source $SOURCE_ZSH"
}

function install_golang {
  echo "Installing GOLANG CONFIG"
  LATEST_GO_VERSION="$(curl https://go.dev/VERSION?m=text | head -n 1)"
  LATEST_GO_DOWNLOAD_URL="https://go.dev/dl/${LATEST_GO_VERSION}.linux-amd64.tar.gz"

  SOURCE_GOLANG="$STUBBE_SRC"
  mkdir -p "$SOURCE_GOLANG"
  wget -q $LATEST_GO_DOWNLOAD_URL
  tar -xf ${LATEST_GO_VERSION}.linux-amd64.tar.gz -C $SOURCE_GOLANG
  rm -rf ${LATEST_GO_VERSION}.linux-amd64.tar.gz
  source "$HOME/.zshrc"
  install_go_apps
  source "$HOME/.zshrc"
}

function install_go_apps {
  go install github.com/jesseduffield/lazygit@latest
  go install github.com/jesseduffield/lazydocker@latest
  go install github.com/xxxserxxx/gotop@latest
}

function install_nvim {
  echo "Installing NEOVIM"
  rm -rf $HOME/.stubbe/bin/nvim
  wget -q https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
  mv nvim.appimage $HOME/.stubbe/bin/nvim
  chmod a+x $HOME/.stubbe/bin/nvim
  ln -s $HOME/.stubbe/src/nvim $HOME/.config/nvim
  echo "You may need FuseLib2 in order to run NeoVim."
}

function install_fonts {
  echo "Installing FONTS"
  SOURCE_FONT="$STUBBE_SRC/fonts"
  mkdir -p "$HOME/.fonts"
  cp -rf "$SOURCE_FONT/." "$HOME/.fonts"
}

function install_tmux {
  echo "Installing TMUX CONFIG"
  if ! is_directory "$HOME/.tmux/plugins/tpm"; then
    git clone --quiet https://github.com/tmux-plugins/tpm $HOME/.tmux/plugins/tpm
  fi
  SOURCE_TMUX="$STUBBE_SRC/tmux/tmux.conf"
  touch "$HOME/.tmux.conf"
  if ! has_string "$SOURCE_TMUX" "$HOME/.tmux.conf"; then
    echo "source-file $SOURCE_TMUX" >>"$HOME/.tmux.conf"
  fi
  eval "tmux source-file $SOURCE_TMUX"
}

function install_intelephense_license {
  TMPDIR=$(mktemp -d)
  git clone --depth=1 git@gist.github.com:c69e23e23d5c52521f6603c39a001645.git "$TMPDIR" --quiet
  mkdir -p "$HOME/intelephense"
  if ! is_file "$HOME/intelephense/license.txt"; then
    cat "$TMPDIR/intelephense_license" > "$HOME/intelephense/license.txt"
  fi
  rm -rf "$TMPDIR"
}

function install_clerk_credentials {
  CLERKCREDSTMPDIR=$(mktemp -d)
  git clone --depth 1 git@git.stubbe.dev:stubbe/clerk-auth.git "$CLERKCREDSTMPDIR" --quiet
  $CLERKCREDSTMPDIR/clerk-auth/.install.sh
  rm -rf $CLERKCREDSTMPDIR
}

function install_regolith_Xresources {
  mkdir -p "$HOME/.config/regolith3"
  ln -s "$STUBBE_SRC/regolith/Xresources" "$HOME/.config/regolith3/Xresources"
}

function install_picom {
  mkdir -p "$HOME/.config/regolith3/picom"
  ln -s "$STUBBE_SRC/picom/picom.conf" "$HOME/.config/regolith3/picom/config"
}

function install_fzf {
    FZFTMPDIR=$(mktemp -d)
    repo="junegunn/fzf"
    release=$(curl --silent -m 10 --connect-timeout 5 "https://api.github.com/repos/$repo/releases/latest")
    url=$(echo "$release" | grep '"browser_download_url":' | sed -E 's/.*"([^"]+)".*/\1/' | grep 'amd64' | grep 'linux')
    wget $url -O $FZFTMPDIR/fzf.tar.gz
    sudo tar -xvzf $FZFTMPDIR/fzf.tar.gz -C /bin
}

info
