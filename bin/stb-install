#!/bin/sh

is_binary() {
  command -v "$1" >/dev/null 2>&1
}

is_elevated_shell() {
  [ "$(id -u)" -eq 0 ]
}

is_nix() {
  grep -q '^ID=nixos' /etc/os-release 2>/dev/null
}

is_file() {
  [ -f "$1" ]
}

# INFO: INSTALL FUNCTION
installer_prompt() {
  echo "WELCOME TO THE STUBBEDEV DOTFILES INSTALLER"

  if is_elevated_shell; then
    echo "Please do not run this script with sudo."
    echo "Execute it normally and any functions which need sudo will prompt for it."
    exit 0
  fi

  echo "Please enter your desired option:"
  printf "(I)nstall Mandatory or (C)ancel? "
  read -r REPLY
  printf "\n"
  case "$REPLY" in
  i | I)
    install_stubbe_all
    exit
    ;;
  c | C)
    echo "Cancelling!"
    exit
    ;;
  *)
    echo "Unrecognized option."
    exit
    ;;
  esac
}

install_stubbe_all() {
  rm -rf "$HOME/.stubbe"
  ln -sf "$PWD" "$HOME/.stubbe"
  install_nix
  install_docker
  conf_fonts

  echo "Install private licenses:"
  printf "(Y)es or [N]o? "
  read -r REPLY
  printf "\n"
  case "$REPLY" in
  [Yy][Ee][Ss] | [Yy])
    license_intelephense
    ;;
  *)
    echo "Skipping private installs"
    ;;
  esac
}

install_nix() {
  sh -c "$(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install)" --daemon
  conf_nix
  install_nix_home_manager
}

install_nix_home_manager() {
  if is_nix; then
    return 0
  fi

  if lspci | grep -qi nvidia >/dev/null; then
    export NIXGL_WRAPPER="nvidia"
  else
    export NIXGL_WRAPPER="mesa"
  fi
  
  export NIXPKGS_ALLOW_UNFREE=1

  rm -rf "$HOME/.config/home-manager"

  /nix/var/nix/profiles/default/bin/nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
  /nix/var/nix/profiles/default/bin/nix-channel --update
  /nix/var/nix/profiles/default/bin/nix-shell '<home-manager>' -A install

  /nix/var/nix/profiles/default/bin/nix-channel --add https://github.com/nix-community/nixGL/archive/main.tar.gz nixgl && nix-channel --update
  /nix/var/nix/profiles/default/bin/nix-env -iA nixgl.auto.nixGLDefault

  conf_nix_home_manager

  "$HOME/.nix-profile/bin/home-manager" switch --impure
  if ! grep -Fxq ".nix-profile/bin/zsh" /etc/shells; then
    echo "$HOME/.nix-profile/bin/zsh" | sudo tee -a /etc/shells
  fi
  sudo usermod -s "$HOME/.nix-profile/bin/zsh" "$USER"
}

install_docker() {
  DOCKERTMPDIR=$(mktemp -d)
  "$HOME/.nix-profile/bin/curl" -fsSL https://get.docker.com -o "$DOCKERTMPDIR/get-docker.sh"
  sudo sh "$DOCKERTMPDIR/get-docker.sh"
  sudo groupadd docker 2>/dev/null || true
  sudo usermod -aG docker "$USER"
  rm -rf "$DOCKERTMPDIR"
}

conf_fonts() {
  SOURCE_FONT="$PWD/src/fonts"
  mkdir -p "$HOME/.fonts"
  mkdir -p "$HOME/.local/share/fonts"
  cp -rf "$SOURCE_FONT/." "$HOME/.fonts"
  cp -rf "$SOURCE_FONT/." "$HOME/.local/share/fonts"
}

conf_nix() {
  if is_nix; then
    return 0
  fi
  if ! grep -Fxq "experimental-features = nix-command flakes" /etc/nix/nix.conf; then
    echo "experimental-features = nix-command flakes" | sudo tee -a /etc/nix/nix.conf >/dev/null
  fi
}

conf_nix_home_manager() {
  mkdir -p "$HOME/.config"
  rm -rf "$HOME/.config/home-manager"
  ln -sf "$PWD/src/nix/home-manager" "$HOME/.config"
}

license_intelephense() {
  TMPDIR=$(mktemp -d)
  "$HOME/.nix-profile/bin/git" clone --depth=1 git@gist.github.com:c69e23e23d5c52521f6603c39a001645.git "$TMPDIR" --quiet
  mkdir -p "$HOME/intelephense"
  if ! is_file "$HOME/intelephense/license.txt"; then
    cat "$TMPDIR/INTELEPHENSE" >"$HOME/intelephense/license.txt"
  fi
  rm -rf "$TMPDIR"
}

installer_prompt
