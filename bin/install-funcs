#!/usr/bin/env zsh

# INFO: REQUIRED ENV VARS
STUBBE_SRC="$HOME/.stubbe/src"
export STUBBE_SRC

# INFO: INSTALL FUNCTION
function installer_prompt {
  if [[ "$SHELL" != */zsh ]]; then
    install_build_essential
    exit
  fi
  if is_elevated_shell; then
    echo "Please do not run this script with sudo."
    echo "Execute it normally and any functions which need sudo will prompt for it."
    exit 0
  fi
  touch "$HOME"/.zshrc
  if ! [[ -f "$HOME/.ssh/id_ed25519.pub" || -f "$HOME/.ssh/id_rsa.pub" ]]; then
    echo "Need to set SSH key before being able to install."
    echo "Goodbye!"
    exit 0
  fi
  echo "Please enter your desired option:"
  read REPLY\?"(I)nstall Mandatory or (C)ancel?"
  printf "\n"
  case "$REPLY" in
  i | I)
    install_stubbe_all
    exit
    ;;
  c | C)
    echo "Cancelling!"
    exit
    ;;
  *)
    info
    exit
    ;;
  esac
}

function install_stubbe_all {
  # INFO: Install generic symlinks
  install_symlinks

  # INFO: Install configs
  install_confs

  # INFO: Install toolchains
  install_toolchain_binaries

  # INFO: Install toolchain apps
  install_toolchain_reliant_binaries

  # INFO: Install non-toolchain apps
  install_non_toolchain_binaries

  # INFO: Install private licenses
  echo "Install private licenses:"
  read REPLY\?"(Y)es or [N]o?"
  printf "\n"
  case "$REPLY" in
  [Yy][Ee][Ss] | [Yy])
    license_intelephense
    ;;
  *)
    echo "Skipping private installs"
    ;;
  esac
  src_zsh
}

function install_toolchain_binaries {
  install_build_essential
  install_nix
  install_nix_home_manager
  install_go
  install_astral
  src_zsh
}

function install_toolchain_reliant_binaries {
  rust_deps
  src_zsh
}

function install_non_toolchain_binaries {
  install_docker
  src_zsh
}

function install_confs {
  conf_nix
  conf_nix_home_manager
  conf_fonts
  conf_sessions
  src_zsh
}

# INFO: Generic symlinks
function install_symlinks {
  ln -sf "$SCRIPT_DIR" "$HOME/.stubbe"
  src_zsh
}

# INFO: Toolchains
function install_build_essential {
  if is_binary apt; then
    bash -c "sudo apt install -y build-essential libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libssl-dev libxext-dev libxft-dev libx11-dev libharfbuzz-dev libfribidi-dev unifont libfuse2 libreadline-dev python3.13-venv"
  fi
  if is_binary dnf; then
    bash -c "sudo dnf install cmake freetype-devel fontconfig-devel libxcb-devel libxkbcommon-devel g++"
  fi
  if is_binary pacman; then
    bash -c "sudo pacman -S cmake freetype2 fontconfig pkg-config make libxcb libxkbcommon python"
  fi
  sudo chsh -s "$(which "zsh")" "$USER"
}
function install_go {
  bash <(curl -sL https://git.io/go-installer)
}
function install_rust {
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
}
function install_volta {
  curl https://get.volta.sh | bash
}
function install_astral {
  curl -LsSf https://astral.sh/uv/install.sh | sh
}
function install_nix {
  sh <(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install) --daemon
  src_zsh
}
function install_nix_home_manager {
  if is_nix; then
    return 0
  fi
  nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
  nix-channel --update
  nix-shell '<home-manager>' -A install
  home-manager switch
}

# INFO: Toolchain dependent apps
function rust_deps {
  cargo install alacritty
  sudo ln -sf "$HOME/.cargo/bin/alacritty" /usr/bin/alacritty
}

# INFO: Non-Toolchain dependent
function install_docker {
  local DOCKERTMPDIR=$(mktemp -d)
  curl -fsSL https://get.docker.com -o "$DOCKERTMPDIR/get-docker.sh"
  sudo sh "$DOCKERTMPDIR/get-docker.sh"
  sudo groupadd docker
  sudo usermod -aG docker "$USER"
  rm -rf "$DOCKERTMPDIR"
}

# INFO: Configs
function conf_fonts {
  local SOURCE_FONT="$STUBBE_SRC/fonts"
  mkdir -p "$HOME/.fonts"
  mkdir -p "$HOME/.local/share/fonts"
  cp -rf "$SOURCE_FONT/." "$HOME/.fonts"
  cp -rf "$SOURCE_FONT/." "$HOME/.local/share/fonts"
}
function conf_nix {
  if is_nix; then
    return 0
  fi
  if ! grep -Fxq "experimental-features = nix-command flakes" /etc/nix/nix.conf; then
    echo "experimental-features = nix-command flakes" | sudo tee -a /etc/nix/nix.conf >/dev/null
  fi
}
function conf_nix_home_manager {
  mkdir -p "$HOME/.config"
  rm -rf "$HOME/.config/home-manager"
  ln -sf "$STUBBE_SRC/nix/home-manager" "$HOME/.config/home-manager"
  ln -sf "$STUBBE_SRC" "$HOME/.config/home-manager/src"
}
function conf_sessions {
  mkdir -p "$HOME/.local/share/wayland-sessions"
  sed "s|__BINARY_PATH__|$(which hyprland)|g" "$STUBBE_SRC/sessions/hyprland.desktop" | tee "$HOME/.local/share/wayland-sessions/hyprland.desktop" >/dev/null
}

# INFO: Private licenses
function license_intelephense {
  local TMPDIR=$(mktemp -d)
  git clone --depth=1 git@gist.github.com:c69e23e23d5c52521f6603c39a001645.git "$TMPDIR" --quiet
  mkdir -p "$HOME/intelephense"
  if ! is_file "$HOME/intelephense/license.txt"; then
    cat "$TMPDIR/INTELEPHENSE" >"$HOME/intelephense/license.txt"
  fi
  rm -rf "$TMPDIR"
}

