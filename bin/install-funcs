#!/usr/bin/env zsh

# INFO: REQUIRED ENV VARS
STUBBE_SRC="$HOME/.stubbe/src"
export STUBBE_SRC

# INFO: INSTALL FUNCTION
function installer_prompt {
  if [[ "$SHELL" != */zsh ]]; then
    install_build_essential
    exit
  fi
  if is_elevated_shell; then
    echo "Please do not run this script with sudo."
    echo "Execute it normally and any functions which need sudo will prompt for it."
    exit 0
  fi
  touch "$HOME"/.zshrc
  if ! [[ -f "$HOME/.ssh/id_ed25519.pub" || -f "$HOME/.ssh/id_rsa.pub" ]]; then
    echo "Need to set SSH key before being able to install."
    echo "Goodbye!"
    exit 0
  fi
  echo "Please enter your desired option:"
  read REPLY\?"(I)nstall Mandatory or (C)ancel?"
  printf "\n"
  case "$REPLY" in
  i | I)
    install_stubbe_all
    exit
    ;;
  c | C)
    echo "Cancelling!"
    exit
    ;;
  *)
    info
    exit
    ;;
  esac
}

function install_stubbe_all {
  # INFO: Install generic symlinks
  install_symlinks

  # INFO: Install toolchains
  install_toolchain_binaries

  # INFO: Install toolchain apps
  install_toolchain_reliant_binaries

  # INFO: Install non-toolchain apps
  install_non_toolchain_binaries

  # INFO: Install configs
  install_confs

  # INFO: Install private licenses
  echo "Install private licenses:"
  read REPLY\?"(Y)es or [N]o?"
  printf "\n"
  case "$REPLY" in
  [Yy][Ee][Ss] | [Yy])
    license_openai
    license_intelephense
    ;;
  *)
    echo "Skipping private installs"
    ;;
  esac
  src_zsh
}

function install_toolchain_binaries {
  install_build_essential
  install_nix
  install_go
  install_rust
  install_astral
  src_zsh
}

function install_toolchain_reliant_binaries {
  nix_deps
  src_zsh
}

function install_non_toolchain_binaries {
  install_docker
  install_keyd
  src_zsh
}

function install_confs {
  conf_nix
  conf_zsh
  conf_nvim
  conf_tmux
  conf_fonts
  conf_wezterm
  conf_regolith_xresources
  conf_regolith_i3
  conf_lazygit
  conf_ideavim
  conf_keyd
  conf_dark_mode
  conf_btop
  conf_dunst
  conf_sway
  conf_rofi
  conf_hyprland
  conf_alacritty
  conf_git
  src_zsh
}

# INFO: Generic symlinks
function install_symlinks {
  mkdir -p "$HOME/.stubbe"
  ln -sf "$SCRIPT_DIR/bin" "$HOME/.stubbe"
  ln -sf "$SCRIPT_DIR/src" "$HOME/.stubbe"
  touch "$HOME/.zshrc"
  src_zsh
}

# INFO: Toolchains
function install_build_essential {
  if is_binary apt; then
    bash -c "sudo apt install -y build-essential libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libssl-dev libxext-dev libxft-dev libx11-dev libharfbuzz-dev libfribidi-dev unifont libfuse2 libreadline-dev"
  fi
  if is_binary dnf; then
    bash -c "sudo dnf install cmake freetype-devel fontconfig-devel libxcb-devel libxkbcommon-devel g++"
  fi
  if is_binary pacman; then
    bash -c "sudo pacman -S cmake freetype2 fontconfig pkg-config make libxcb libxkbcommon python"
  fi
  sudo chsh -s "$(which "zsh")" "$USER"
}
function install_go {
  bash <(curl -sL https://git.io/go-installer)
}
function install_rust {
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
}
function install_volta {
  curl https://get.volta.sh | bash
}
function install_astral {
  curl -LsSf https://astral.sh/uv/install.sh | sh
}
function install_nix {
  sh <(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install) --daemon
}

# INFO: Toolchain dependent apps
function nix_deps {
  if is_nix; then
    return 0
  fi
  nix profile install $(cat "$STUBBE_SRC/nix/nix/packages.txt") --impure
}

# INFO: Non-Toolchain dependent
function install_docker {
  local DOCKERTMPDIR=$(mktemp -d)
  curl -fsSL https://get.docker.com -o "$DOCKERTMPDIR/get-docker.sh"
  sudo sh "$DOCKERTMPDIR/get-docker.sh"
  sudo groupadd docker
  sudo usermod -aG docker "$USER"
  rm -rf "$DOCKERTMPDIR"
}
function install_keyd {
  local CURRENTDIR=$PWD
  local KEYDDIR=$(mktemp -d)
  git clone https://github.com/rvaiya/keyd "$KEYDDIR/keyd"
  cd "$KEYDDIR/keyd" || exit
  make
  sudo make install
  sudo systemctl enable keyd
  sudo systemctl start keyd
  cd "$CURRENTDIR" || exit
  rm -rf "$KEYDDIR"
}

# INFO: Configs
function conf_fonts {
  local SOURCE_FONT="$STUBBE_SRC/fonts"
  mkdir -p "$HOME/.fonts"
  mkdir -p "$HOME/.local/share/fonts"
  cp -rf "$SOURCE_FONT/." "$HOME/.fonts"
  cp -rf "$SOURCE_FONT/." "$HOME/.local/share/fonts"
}
function conf_zsh {
  local SOURCE_ZSH="$STUBBE_SRC/zsh/init"
  touch "$HOME/.zshrc"
  if ! has_string "$HOME/.zshrc" "$SOURCE_ZSH"; then
    echo "source $SOURCE_ZSH" >>"$HOME/.zshrc"
  fi
}
function conf_nix {
  if is_nix; then
    return 0
  fi
  if ! grep -Fxq "experimental-features = nix-command flakes" /etc/nix/nix.conf; then
      echo "experimental-features = nix-command flakes" | sudo tee -a /etc/nix/nix.conf > /dev/null
  fi
}
function conf_nvim {
  rm -rf "$HOME/.config/nvim"
  ln -sf "$STUBBE_SRC/nvim" "$HOME/.config/"
}
function conf_tmux {
  if ! is_directory "$HOME/.tmux/plugins/tpm"; then
    git clone --quiet https://github.com/tmux-plugins/tpm "$HOME"/.tmux/plugins/tpm
  fi
  local SOURCE_TMUX="$STUBBE_SRC/tmux/tmux.conf"
  touch "$HOME/.tmux.conf"
  if ! has_string "$HOME/.tmux.conf" "$SOURCE_TMUX"; then
    echo "source-file $SOURCE_TMUX" >>"$HOME/.tmux.conf"
  fi
}
function conf_regolith_xresources {
  sudo mkdir -p /usr/share/backgrounds
  sudo cp -rf "$STUBBE_SRC/wallpapers/"* /usr/share/backgrounds
  mkdir -p "$HOME/.config/regolith3"
  ln -sf "$STUBBE_SRC/regolith/Xresources" "$HOME/.config/regolith3/Xresources"
  ln -sf "$STUBBE_SRC/picom" "$HOME/.config/regolith3/picom"
}
function conf_regolith_i3 {
  mkdir -p "$HOME/.config/regolith3"
  rm -rf "$HOME/.config/regolith3/i3"
  ln -sf "$STUBBE_SRC/regolith/i3" "$HOME/.config/regolith3/i3"
}
function conf_wezterm {
  local SOURCE_WEZTERM="$STUBBE_SRC/wezterm"
  mkdir -p "$HOME/.config/wezterm"
  ln -sf "$SOURCE_WEZTERM/wezterm.lua" "$HOME/.config/wezterm"
}
function conf_lazygit {
  local SOURCE_LAZYGIT="$STUBBE_SRC/lazygit"
  mkdir -p "$HOME/.config/lazygit"
  ln -sf "$SOURCE_LAZYGIT/config.yml" "$HOME/.config/lazygit"
  touch "$HOME/.config/lazygit/state.yml"
  if ! has_string "$HOME/.config/lazygit/state.yml" "startuppopupversion"; then
    echo "startuppopupversion: 5" >>"$HOME/.config/lazygit/state.yml"
  fi
}
function conf_ideavim {
  local SOURCE_IDEAVIM="$STUBBE_SRC/ideavim"
  ln -sf "$SOURCE_IDEAVIM/ideavimrc" "$HOME/.ideavimrc"
}
function conf_keyd {
  local SOURCE_KEYD="$STUBBE_SRC/keyd"
  sudo ln -sf "$SOURCE_KEYD/default.conf" "/etc/keyd"
  sudo keyd reload
}
function conf_xmodmap {
  local XMODMAPDIR="$STUBBE_SRC/xmodmap"
  ln -sf "$XMODMAPDIR/Xmodmap" "$HOME/.Xmodmap"
  touch "$HOME/.profile"
  if ! grep -Fxq "xmodmap ~/.Xmodmap" "$HOME/.profile"; then
    {
      echo ""
      echo "echo 2 | sudo tee /sys/module/hid_apple/parameters/fnmode"
      echo "echo 1 | sudo tee /sys/module/hid_apple/parameters/swap_opt_cmd"
      echo "xmodmap ~/.Xmodmap"
    } >>"$HOME/.profile"
  fi
}
function conf_dark_mode {
  mkdir -p "$HOME/.config"
  mkdir -p "$HOME/.config/xdg-desktop-portal"
  touch "$HOME/.config/xdg-desktop-portal/portals.conf"
  if ! grep -Fxq "default=gtk;wlr" "$HOME/.config/xdg-desktop-portal/portals.conf"; then
    {
      echo "[preferred]"
      echo "default=gtk;wlr"
      echo ""
    } >>"$HOME/.config/xdg-desktop-portal/portals.conf"
  fi
}
function conf_btop {
  mkdir -p "$HOME/.config"
  ln -sf "$STUBBE_SRC/btop" "$HOME/.config/btop"
}
function conf_alacritty {
  mkdir -p "$HOME/.config"
  ln -sf "$STUBBE_SRC/alacritty" "$HOME/.config"
  if is_binary "alacritty" && is_binary update-alternatives; then
    local alacritty_path="$(which alacritty)"
    sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator "$alacritty_path" 50
    sudo update-alternatives --set x-terminal-emulator "$alacritty_path"
  fi
}
function conf_git {
  if is_binary git; then
    git config --global user.name "Alexander Bugge Stage"
    git config --global user.email "abs@stubbe.dev"
    git config --global core.excludesfile ~/.gitignore
    git config --global push.autoSetupRemote true
    git config --global advice.setUpstreamFailure false
    git config --global core.editor "$(which nvim || echo 'vim')"
  fi
}
function conf_dunst {
  mkdir -p "$HOME/.config"
  ln -sf "$STUBBE_SRC/dunst" "$HOME/.config/dunst"
}
function conf_sway {
  mkdir -p "$HOME/.config"
  rm -rf "$HOME/.config/sway"
  ln -sf "$STUBBE_SRC/sway" "$HOME/.config/sway"
}
function conf_rofi {
  mkdir -p "$HOME/.config"
  rm -rf "$HOME/.config/rofi"
  ln -sf "$STUBBE_SRC/rofi" "$HOME/.config/rofi"
}
function conf_hyprland {
  mkdir -p "$HOME/.config"
  rm -rf "$HOME/.config/hypr"
  ln -sf "$STUBBE_SRC/hypr" "$HOME/.config/hypr"
  conf_waybar
}
function conf_waybar {
  mkdir -p "$HOME/.config"
  rm -rf "$HOME/.config/waybar"
  ln -sf "$STUBBE_SRC/waybar" "$HOME/.config/waybar"
}
function conf_zed {
  mkdir -p "$HOME/.config"
  rm -rf "$HOME/.config/zed"
  ln -sf "$STUBBE_SRC/zed" "$HOME/.config/zed"
}

# INFO: Private licenses
function license_intelephense {
  local TMPDIR=$(mktemp -d)
  git clone --depth=1 git@gist.github.com:c69e23e23d5c52521f6603c39a001645.git "$TMPDIR" --quiet
  mkdir -p "$HOME/intelephense"
  if ! is_file "$HOME/intelephense/license.txt"; then
    cat "$TMPDIR/INTELEPHENSE" >"$HOME/intelephense/license.txt"
  fi
  rm -rf "$TMPDIR"
}
function license_openai {
  local TMPDIR=$(mktemp -d)
  git clone --depth=1 git@gist.github.com:5bb1f5258de2d120a0ea8c6627c4d4e1.git "$TMPDIR" --quiet
  cat "$TMPDIR/OPENAI" >>"$HOME/.zshrc"
  rm -rf "$TMPDIR"
}
