#!/bin/bash

function is_binary {
	command -v "$1" &>/dev/null
}

function is_directory {
	[[ -d "$1" ]]
}

function is_file {
	[[ -f "$1" ]]
}

function has_string {
	grep -q "$2" "$1"
}

function is_clerk_dev {
	[[ $(hostname) == *'clerk.network'* ]]
}

function zle_eval {
  echo -en "\e[2K\r"
  eval "$@"
  zle redisplay
}
function zle_ts {
  zle_eval ts
}
function zle_tstls {
  zle_eval tstls
}
function zle_tslg {
  zle_eval tslg
}


function src-stb-installers {
	source $(readlink -f "$HOME/.stubbe/bin/install-funcs")
}

function S {
	sudo "$(which "$1")" "${@:2}"
}

if is_binary nala; then
	function npt {
		if [ "$1" = "i" ]; then
			sudo nala install "${@:2}"
		elif [ "$1" = "u" ]; then
			sudo nala update "${@:2}"
		elif [ "$1" = "ug" ]; then
			sudo nala upgrade "${@:2}"
		elif [ "$1" = "s" ]; then
			sudo nala search "${@:2}"
		elif [ "$1" = "r" ]; then
			sudo nala remove "${@:2}"
		elif [ "$1" = "l" ]; then
			sudo nala list --installed
		else
			sudo nala "${@}"
		fi
	}
fi

if is_binary apt-fast; then
	alias apt="apt-fast"
fi

if is_binary pacstall; then
	alias pt="pacstall"
fi

if is_binary git; then
	git config --global user.name "Alexander Stage"
	git config --global user.email "abs@stubbe.dev"
	git config --global core.excludesfile ~/.gitignore
	alias git_wipe="git stash && git stash clear"
fi

if is_binary phpcs; then
	function php_lint {
		phpcs --standard="$1" "$2"
	}
fi

if is_binary phpcbf; then
	function php_fix {
		phpcbf --standard="$1" "$2"
	}
fi

if is_binary docker; then
	function docker_killall {
		docker kill "$(docker ps -q)"
	}
fi

if is_binary docker && is_binary lazydocker && is_binary podman; then
	alias lazypodman='DOCKER_HOST=unix:///run/user/1000/podman/podman.sock lazydocker'
fi

if is_binary bat; then
	function view_git_file {
		curl "$(echo "$1" | sed "s/github.com/raw.githubusercontent.com/g" | sed "s/\/blob\//\/refs\/heads\//g")" | bat -f -l "${1##*\.}"
	}
else
	function view_git_file {
		curl "$(echo "$1" | sed "s/github.com/raw.githubusercontent.com/g" | sed "s/\/blob\//\/refs\/heads\//g")" | cat
	}
fi

if is_binary eza; then
	alias ls='eza'
else
	alias ls='ls --color'
fi

if is_binary ss; then
	function pid_on_port {
		ss -lptn " sport = :$1"
	}
fi

if is_binary curl; then
	function color_swatches {
		curl -s "https://gist.githubusercontent.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263/raw/e50a28ec54188d2413518788de6c6367ffcea4f7/print256colours.sh" | bash
	}
fi

if is_binary nvim; then
	alias vim='nvim'
	alias vi='nvim'
	alias nano='nvim'
	alias ed='nvim'
	alias svim='nvim -u NONE'
fi

if is_binary tmux; then
	function tnc {
		TMUXDIRNAME=$(basename "$PWD" | tr '.' '_')
		TMPDIR=$(mktemp -d)
		TMPDIRNAME=$(echo "$TMPDIR" | cut -d "." -f 2)
		cp -rT "./../$TMUXDIRNAME" "$TMPDIR/$TMUXDIRNAME"
		cd "$TMPDIR/$TMUXDIRNAME" || exit
		if [ -z "$1" ]; then
			TMUXCLIENTNAME="$(whoami)($TMUXDIRNAME)[$TMPDIRNAME]"
		else
			TMUXCLIENTNAME="$1"
		fi
		tmux new -As "$TMUXCLIENTNAME"
	}

	function tn {
		TMUXDIRNAME=$(basename "$PWD" | tr '.' '_')
		if [ -z "$1" ]; then
			TMUXCLIENTNAME="$(whoami)($TMUXDIRNAME)"
		else
			TMUXCLIENTNAME="$1"
		fi
		tmux new -As "$TMUXCLIENTNAME"
	}

	function tls {
		bash -c "tmux ls"
	}

	function ta {
		if [ -z "$1" ]; then
			tmux attach
		else
			tmux attach -t "$1"
		fi
	}
fi

if is_binary screen; then
	function tx {
		session_name="$(git symbolic-ref --short HEAD 2>/dev/null)"
		case $1 in
		l | ls)
			screen -ls
			;;
		n | new)
			screen -S "$session_name"
			;;
		j | join)
			screen -r "$session_name"
			;;
		*)
			screen "$@"
			;;
		esac
	}
fi

function handleize_files {
	for f in *\ *; do mv "$f" "${f// /_}"; done
	find . -maxdepth 1 -type f | while read -r upName; do
		loName=$(echo "${upName}" | tr '[:upper:]' '[:lower:]')
		mv "$upName" "$loName"
	done
}

if is_binary systemctl; then
	function kill_native_servers {
		if is_binary mysql; then
			sudo systemctl stop mysql
		fi
		if is_binary nginx; then
			sudo systemctl stop nginx
		fi
		if is_binary apache2; then
			sudo systemctl stop apache2
		fi
	}
fi

if is_binary uv; then
	function pysrc {
		if ! is_file "$PWD/venv/bin/activate"; then
			uv venv ./venv
		fi
		source "$PWD/venv/bin/activate"
	}
fi

if is_clerk_dev; then
	function venv {
		case $1 in
		tsd | TSD)
			cd "$HOME/git/thesocialdigits/" || exit
			source "$HOME/git/thesocialdigits/venv/bin/activate"
			echo "Switched to: TheSocialDigits"
			;;
		dt | DT)
			cd "$HOME/git/dev-tools/" || exit
			echo "Switched to: DevTools"
			;;
		av3 | AV3)
			cd "$HOME/git/api-v3/" || exit
			echo "Switched to: API-V3"
			;;
		dot | DOT)
			cd "$HOME/git/dotfiles/" || exit
			echo "Switched to: DOTFiles"
			;;
		*)
			echo "Please provide a valid first argument"
			;;
		esac
	}

	function run {
		if ! [ $# -eq 2 ]; then
			echo "Please provide one of the following options:"
			echo "imp[orter] STORE_ID"
			echo "exp[orter] EXPORTER_ID"
			return 0
		fi
		case $1 in
		exp | exporter)
			venv tsd
			echo "Running Exporter: $2"
			python "$PWD/batch/audience_export.py" $2
			;;
		imp | importer)
			venv tsd
			echo "Running Importer: $2"
			python "$PWD/batch/download_data.py" $2
			;;
		*)
			echo "Please provide one of the following options:"
			echo "imp[orter] STORE_ID"
			echo "exp[orter] EXPORTER_ID"
			;;
		esac
	}
fi

if is_binary openvpn3; then
	function cvpn {
		ACTIVE_SESSIONS=$(openvpn3 sessions-list | grep -i 'path' | awk '{p=index($0, ":");print $2}')
		if ((${#ACTIVE_SESSIONS[@]})); then
			rm -rf $HOME/.vpn_active-*
			echo "Disconnecting from VPN..."
			for instance in $ACTIVE_SESSIONS; do
				openvpn3 session-manage --disconnect --session-path ${instance}
			done
      sudo systemctl stop openvpn
		else
			echo "Connecting to VPN..."
      mktemp "$HOME/.vpn_active-XXXXX" 2>/dev/null
			openvpn3 session-start --config ~/.ssh/client.ovpn
		fi
	}
fi
