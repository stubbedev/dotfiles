#!/usr/bin/env zsh
# shellcheck disable=SC1091

if is_binary php; then
  function art {
    if is_file "$PWD/artisan"; then
      php artisan "${@:1}"
    elif is_binary artisan; then
      artisan "${@:1}"
    else
      echo "No artisan on current PATH"
    fi
  }
fi

if are_binary git bat fzf awk sed xargs find sort tail head tr grep; then
  function gcm {
    in_git_repo || return 1

    local initial_query="$*"

    local commit_prompt
    local commit_prefix=$(git branch --show-current |
      awk 'match($0, /[A-Z]+-[0-9]+/) { print substr($0, RSTART, RLENGTH) }')
    if [[ -z "$commit_prefix" ]]; then
      commit_prompt="(Enter: commit message)> "
    else
      commit_prompt="(Enter: commit message [$commit_prefix])> "
    fi

    local commit_message=$(fzf --height=1 \
      --query="$initial_query" \
      --reverse \
      --no-info \
      --print-query \
      --prompt="$commit_prompt" </dev/null)

    if [[ -z "$commit_message" ]]; then
      return 0
    fi

    if [[ -z "$commit_prefix" ]]; then
      git commit -m "$commit_message"
    else
      git commit -m "$commit_prefix: $commit_message"
    fi
  }

  function gp {
    in_git_repo || return 1

    local banned_branches=(
      "develop"
      "staging"
      "production"
      "master"
      "main"
    )
    local branch_name=$(git branch --show-current)

    if [[ " ${banned_branches[@]} " =~ " ${branch_name} " ]]; then
      local choice=$(echo -e "No\nYes" |
        fzf \
          --no-input \
          --header="[WARN] Protected Branch: Confirm Push" \
          --reverse \
          --height=3 \
          --no-info \
          --no-multi \
          --exit-0)

      if [[ "$choice" != "Yes" ]]; then
        return 0
      fi
    fi

    git branch --set-upstream-to="origin/$branch_name"
    git push origin "$branch_name"
  }
  function gcr {
    in_git_repo || return 1

    current_tag=$(git tag --sort=version:refname | awk '{print $1}' | tail -n 1)
    local increment_action=$(echo -e "Major\nMinor\nPatch" |
      fzf --prompt="(Enter: select action)> " \
        --height=3 \
        --no-input \
        --no-info)

    local major=$(echo "$current_tag" | grep -oP '^\d+')
    local minor=$(echo "$current_tag" | grep -oP '(?<=\.)\d+(?=\.)')
    local patch=$(echo "$current_tag" | grep -oP '\d+$')

    case $increment_action in
    "Major")
      major=$((major + 1))
      ;;
    "Minor")
      minor=$((minor + 1))
      ;;
    "Patch")
      patch=$((patch + 1))
      ;;
    *)
      return 0
      ;;
    esac
    local release_branch="$major.$minor.$patch"
    git checkout -b "release/$release_branch"
  }
  function gcb {
    in_git_repo || return 1

    local initial_query=""
    if [[ -n "$1" ]]; then
      initial_query="$1"
    fi

    local git_branches=$(git branch --all | awk '{sub(/^remotes\/origin\//, "", $1); print $1}' | sort -u)

    local branch_name=$(echo -e $git_branches |
      fzf --prompt="(Enter: checkout branch, Ctrl+C: create new branch)> " \
        --query="$initial_query" \
        --bind 'enter:accept' \
        --select-1 \
        --exit-0 \
        --print-query \
        --no-info \
        --height=5 |
      tail -n1)

    if [[ -n "$branch_name" && $(echo -e $git_branches | grep -Fx "$branch_name") ]]; then
      git checkout "$branch_name"
      return 0
    fi

    if [[ -z "$branch_name" ]]; then
      branch_name=$(fzf \
        --prompt="(Enter: create branch [Ticket: ABC-1234 || Tag: 4.3.21], Ctrl+C: cancel command)> " \
        --height=1 \
        --reverse \
        --no-info \
        --print-query </dev/null)
    fi

    if [[ -z "$branch_name" ]]; then
      return 0
    fi

    local tag_mask="^[0-9]+\.[0-9]+\.[0-9]+$"
    if [[ $branch_name =~ $tag_mask ]]; then
      git checkout -b "release/$branch_name" || git checkout "release/$branch_name"
      return 0
    fi

    local branch_prefix=$(echo -e "feature\nbugfix\nhotfix" |
      fzf --prompt="(Enter: select prefix)> " \
        --height=3 \
        --no-input \
        --no-info)

    if [[ -z "$branch_prefix" ]]; then
      return 0
    fi

    local new_branch_name
    local branch_suffix=$(fzf \
      --height=1 \
      --reverse \
      --no-info \
      --print-query \
      --prompt="(Enter: select suffix)> " </dev/null |
      head -1)

    if [[ -n "$branch_suffix" ]]; then
      branch_suffix=$(echo "$branch_suffix" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')
      new_branch_name="$branch_prefix/$branch_name-$branch_suffix"
    else
      new_branch_name="$branch_prefix/$branch_name"
    fi

    if [[ "$new_branch_name" != "/" ]]; then
      git checkout -b "$new_branch_name" || git checkout "$new_branch_name"
    fi
  }

  function ga {
    in_git_repo || return 1

    local direct_add="$@"
    if [[ -n "$@" ]]; then
      git add "$@"
    fi
    local temp_pwd="$PWD"
    cd $(git rev-parse --show-toplevel)

    local git_status=$(git status --porcelain)
    local tracked_files=$(echo -e "$git_status" | awk '/^.M|^MM|^R.M/ {if ($4 != "") print $4; else print $2}' | sort -u)
    local deleted_files=$(echo -e "$git_status" | awk '/^.D/ {print $2}')
    local untracked_files=$(echo -e "$git_status" | awk '/^\?\?/ {print $2}' | xargs -I {} find "{}" -type f -print)

    if [[ -n "$tracked_files" ]]; then
      local tracked_selected=$(printf "%s\n" $tracked_files | fzf --multi \
        --preview='git diff --diff-filter=M -- {} | bat --style=numbers --color=always' \
        --preview-window='up:90%:wrap:nohidden' \
        --prompt="(Tab: toggle file, Shift+Tab: toggle all files, Enter: submit selection, Ctrl+C: cancel selection)> " \
        --header="Add tracked files" \
        --bind 'shift-tab:toggle-all' \
        --bind "tab:toggle" \
        --bind 'enter:transform:[[ $FZF_SELECT_COUNT -gt 0 ]] && echo accept || echo abort' \
        --no-info \
        --exit-0)

      if [[ -n "$tracked_selected" ]]; then
        local tracked_selection=($(echo "$tracked_selected" | awk '{for(i=1; i<=NF; i++) print $i}'))
        for file in "${tracked_selection[@]}"; do
          git add "$file" -p
        done
      fi
    fi

    if [[ -n "$deleted_files" ]]; then
      local deleted_selected=$(printf "%s\n" $deleted_files |
        fzf --multi \
          --preview='git diff --diff-filter=D -- {} | bat --style=numbers --color=always' \
          --preview-window='up:90%:wrap:nohidden' \
          --prompt="(Tab: toggle file, Shift+Tab: toggle all files, Enter: submit selection, Ctrl+C: cancel selection)> " \
          --header="Add deleted files" \
          --bind 'shift-tab:toggle-all' \
          --bind "tab:toggle" \
          --bind 'enter:transform:[[ $FZF_SELECT_COUNT -gt 0 ]] && echo accept || echo abort' \
          --no-info \
          --exit-0)

      if [[ -n "$deleted_selected" ]]; then
        local deleted_selection=($(echo "$deleted_selected" | awk '{for(i=1; i<=NF; i++) print $i}'))
        for file in "${deleted_selection[@]}"; do
          git add "$file"
        done
      fi
    fi

    if [[ -n "$untracked_files" ]]; then
      local untracked_selected=$(printf "%s\n" $untracked_files |
        fzf --multi \
          --preview='bat --style=numbers --color=always {}' \
          --preview-window='up:90%:wrap:nohidden' \
          --prompt="(Tab: toggle file, Shift+Tab: toggle all files, Enter: submit selection, Ctrl+C: cancel selection)> " \
          --header="Add untracked files" \
          --bind 'shift-tab:toggle-all' \
          --bind "tab:toggle" \
          --bind 'enter:transform:[[ $FZF_SELECT_COUNT -gt 0 ]] && echo accept || echo abort' \
          --no-info \
          --exit-0)

      if [[ -n "$untracked_selected" ]]; then
        local untracked_selection=($(echo "$untracked_selected" | awk '{for(i=1; i<=NF; i++) print $i}'))
        for file in "${untracked_selection[@]}"; do
          git add "$file"
        done
      fi
    fi
    cd "$temp_pwd"
    clear
    echo -e ""
    git status --short
  }

  function gsd {
    in_git_repo || return 1

    git diff
  }

  function gd {
    in_git_repo || return 1

    local initial_query=""
    if [[ -n "$1" ]]; then
      initial_query="$1"
    fi

    local current_branch=$(git branch --show-current)
    local git_branches=$(git branch --all | awk '{print $1}')
    local remote_branch=$(echo -e $git_branches |
      fzf --prompt="(Enter: select comparison branch)> " \
        --query="$initial_query" \
        --select-1 \
        --exit-0 \
        --print-query \
        --no-info \
        --height=5 |
      tail -n1)

    git diff $current_branch..$remote_branch --color
  }
  function gst {
    in_git_repo || return 1

    git status
  }
  function gg {
    in_git_repo || return 1

    local current_branch=$(git branch --show-current)
    git branch --set-upstream-to="origin/$current_branch"
    git pull
  }
  function gga {
    in_git_repo || return 1

    local current_branch=$(git branch --show-current)
    git branch --set-upstream-to="origin/$current_branch"
    git pull --all
  }
  function gf {
    in_git_repo || return 1

    git fetch
  }
  function gfa {
    in_git_repo || return 1

    git fetch --all
  }
  function ghr {
    in_git_repo || return 1

    git reset --hard HEAD~
  }
  function ghrn {
    in_git_repo || return 1

    git reset --hard HEAD~"$1"
  }
  function gr {
    in_git_repo || return 1

    git reset --soft HEAD~
  }
  function grn {
    in_git_repo || return 1

    git reset --soft HEAD~"$1"
  }
  function gsa {
    in_git_repo || return 1

    git stash
  }
  function gw {
    in_git_repo || return 1

    git stash && git stash clear
  }
  function ggo {
    in_git_repo || return 1

    local initial_query=""
    if [[ -n "$1" ]]; then
      initial_query="$1"
    fi

    local git_branches=$(git branch --all | awk '{sub(/^[* ] */, ""); sub(/^remotes\/origin\//, ""); print $1}' | grep -v '^HEAD' | sort -u)

    local selected_branch=$(echo -e "$git_branches" |
      fzf --prompt="(Enter: select branch to pull from origin)> " \
        --query="$initial_query" \
        --select-1 \
        --exit-0 \
        --no-info \
        --height=10)

    if [[ -n "$selected_branch" && $(echo -e "$git_branches" | grep -Fx "$selected_branch") ]]; then
      git pull origin "$selected_branch"
    fi
  }
  function in_git_repo {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      return 1
    fi
  }

fi

if is_binary nala; then
  function npt {
    case "$1" in
    [iI] | [iI]nstall)
      sudo nala install "${@:2}"
      ;;
    [uU] | [uU]pdate)
      sudo nala update "${@:2}"
      ;;
    [uU]g | [uU]pgrade)
      sudo nala upgrade "${@:2}"
      ;;
    [sS] | [sS]earch)
      sudo nala search "${@:2}"
      ;;
    [rR] | [rR]emove)
      sudo nala remove "${@:2}"
      ;;
    l | ls | list)
      sudo nala list --installed
      ;;
    [hH] | [hH]elp)
      nala --help
      ;;
    *)
      sudo nala "${@}"
      ;;
    esac
  }
fi

if is_binary bat; then
  function view_git_file {
    curl "$(echo "$1" | sed "s/github.com/raw.githubusercontent.com/g" | sed "s/\/blob\//\/refs\/heads\//g")" | bat -f -l "${1##*\.}"
  }
else
  function view_git_file {
    curl "$(echo "$1" | sed "s/github.com/raw.githubusercontent.com/g" | sed "s/\/blob\//\/refs\/heads\//g")" | cat
  }
fi

if is_binary ss; then
  function pop {
    ss -lptn " sport = :$1"
  }
fi

if is_binary uv; then
  function pysrc {
    if ! is_file "$PWD/venv/bin/activate"; then
      uv venv ./venv
    fi
    is_file "$PWD/venv/bin/activate" && source "$PWD/venv/bin/activate"
  }
fi

if is_binary fzf; then
  function fzf-project-picker {
    cd $(find ~/git -maxdepth 3 -mindepth 1 -type d -exec test -d '{}/.git' \; -print 2>/dev/null | fzf)
    clear
  }
  function fzf-directory-picker {
    cd $(find . -maxdepth 5 -mindepth 1 -type d ! -path '*/\.*' -print 2>/dev/null | fzf --algo=v1)
    clear
  }
fi

if is_binary home-manager; then
  function hm {
    if lspci | grep -qi nvidia >/dev/null; then
      export NIXGL_WRAPPER="nvidia"
    else
      export NIXGL_WRAPPER="mesa"
    fi

    if is_binary hyprctl; then
      export USE_HYPRLAND=true
    else
      export USE_HYPRLAND=false
    fi

    case "$1" in
      "update"|"upgrade")
        echo "🔄 Starting system update process..."

        # Update system packages
        echo "📦 Updating system packages..."
        if is_binary nala; then
          sudo nala update && sudo nala upgrade
        elif is_binary pacman; then
          sudo pacman -Syu
        elif is_binary apt; then
          sudo apt update && sudo apt upgrade
        elif is_binary dnf; then
          sudo dnf update && sudo dnf upgrade
        else
          echo "⚠️  No native package manager found"
        fi

        # Update snaps if installed
        if is_binary snap; then
          echo "📱 Updating snap packages..."
          sudo snap refresh
        fi

        # Update flatpaks if installed
        if is_binary flatpak; then
          echo "📦 Updating flatpak packages..."
          flatpak update
        fi

        # Update nix channels
        echo "❄️  Updating nix channels..."
        nix-channel --update

        # Run home-manager switch for upgrade
        if [[ "$1" == "upgrade" ]]; then
          echo "🏠 Applying home-manager configuration..."
          home-manager switch --impure
        fi

        echo "✅ Update process completed!"
        ;;
      "search")
        if [[ -z "$2" ]]; then
          echo "Usage: hm search <package_name>"
          return 1
        fi

        echo "🔍 Searching nix packages for: $2" >&2
        if is_binary fzf; then
          # Search nixpkgs with fzf and print selected package name
          local selected=$(nix search nixpkgs "$2" --json 2>/dev/null | \
            jq -r 'to_entries[] | "\(.key)|\(.value.pname // "unknown")|\(.value.description // "no description")"' | \
            column -t -s '|' | \
            fzf --ansi \
                --preview 'echo {}' \
                --preview-window=up:3:wrap \
                --header="🔍 Select package (Enter to print name, Esc to exit)" \
                --color='fg+:bright-white,bg+:bright-black,hl:yellow,hl+:bright-yellow')

          if [[ -n "$selected" ]]; then
            # Extract package name and strip legacyPackages prefix
            echo "$selected" | awk '{print $1}' | sed 's/^legacyPackages\.[^.]*\.//'
          fi
        else
          # Fallback search with basic formatting
          if is_binary jq; then
            echo "📦 Available packages matching '$2':" >&2
            nix search nixpkgs "$2" --json 2>/dev/null | \
              jq -r 'to_entries[] | "\u001b[36m\(.key | sub("^legacyPackages\\.[^.]*\\."; ""))\u001b[0m - \u001b[32m\(.value.pname // "unknown")\u001b[0m - \(.value.description // "no description")"' >&2
          else
            nix search nixpkgs "$2" 2>/dev/null >&2 || nix-env -qaP | grep -i "$2" >&2
          fi
        fi
        ;;
      *)
        home-manager "$@" --impure
        ;;
    esac
  }
fi
