#!/usr/bin/env zsh

function is_binary {
  command -v "$1" &>/dev/null
}

function is_directory {
  [[ -d "$1" ]]
}

function is_file {
  [[ -f "$1" ]]
}

function has_string {
  grep -q "$2" "$1"
}

function is_elevated_shell {
  [[ "$EUID" -eq 0 ]]
}

function src-stb-installers {
  source "$(readlink -f "$HOME/.stubbe/bin/install-funcs")"
}

function src_zsh {
  source "$HOME/.zshrc"
}

if is_binary php; then
  function art {
    if is_file "$PWD/artisan"; then
      php artisan "${@:1}"
    elif is_binary artisan; then
      artisan "${@:1}"
    else
      echo "No artisan on current PATH"
    fi
  }
fi

if is_binary nala; then
  function npt {
    case "$1" in
    [iI] | [iI]nstall)
      sudo nala install "${@:2}"
      ;;
    [uU] | [uU]pdate)
      sudo nala update "${@:2}"
      ;;
    [uU]g | [uU]pgrade)
      sudo nala upgrade "${@:2}"
      ;;
    [sS] | [sS]earch)
      sudo nala search "${@:2}"
      ;;
    [rR] | [rR]emove)
      sudo nala remove "${@:2}"
      ;;
    l | ls | list)
      sudo nala list --installed
      ;;
    [hH] | [hH]elp)
      nala --help
      ;;
    *)
      sudo nala "${@}"
      ;;
    esac
  }
fi

if is_binary pacstall; then
  function pt {
    case "$1" in
    [iI] | [iI]nstall)
      sudo pacstall -I "${@:2}"
      ;;
    [uU] | [uU]pdate)
      sudo pacstall -U "${@:2}"
      ;;
    [uU]g | [uU]pgrade)
      sudo pacstall -Up "${@:2}"
      ;;
    [sS] | [sS]earch)
      sudo pacstall -S "${@:2}"
      ;;
    [rR] | [rR]emove)
      sudo pacstall -R "${@:2}"
      ;;
    l | ls | list)
      sudo pacstall -L
      ;;
    [hH] | [hH]help)
      pacstall -h
      ;;
    *)
      sudo pacstall "${@}"
      ;;
    esac
  }
fi

if is_binary git; then
  function gcm {
    commit_prefix="$(git rev-parse --abbrev-ref HEAD | awk 'match($0, /[A-Z]+-[0-9]+/) { print substr($0, RSTART, RLENGTH) }')"
    if [[ "$commit_prefix" = "" ]]; then
      read commit_message\?"Message: "
    else
      read commit_message\?"Message for $commit_prefix:"
    fi
    git commit -m "$commit_prefix: $commit_message"
  }
  function gp {
    banned_branches=("develop" "staging" "production")
    branch_name="$(git rev-parse --abbrev-ref HEAD)"
    if [[ ! " ${banned_branches[@]} " =~ " ${branch_name} " ]]; then
      git push origin "$branch_name"
    else
      echo "ON [$branch_name]: PUSH DENIED"
    fi
  }
  function gcb {
    read branch_substring\?"Ticket Number: "
    local branch_name
    branch_name=$(git branch --all | grep "$branch_substring" | sed -E 's/^[ *]*//' | head -n 1)
    if [[ -n "$branch_name" ]]; then
      git checkout "$branch_name"
    else
      local branch_prefix=$(pick "feature" "bugfix" "hotfix")
      local new_branch_name
      read branch_suffix\?"Branch Suffix: "
      if [[ -n "$branch_suffix" ]]; then
        branch_suffix=$(echo $branch_suffix | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')
        new_branch_name="$branch_prefix/$branch_substring-$branch_suffix"
      else
        new_branch_name="$branch_prefix/$branch_substring"
      fi
      git checkout -b "$new_branch_name"
    fi
  }
  function gd {
    git diff
  }
  function gst {
    git status
  }
  function gP {
    git pull
  }
  function gf {
    git fetch --all
  }
  function ghr {
    git reset --hard HEAD~
  }
  function ghrn {
    git reset --hard HEAD~"$1"
  }
  function gr {
    git reset --soft HEAD~
  }
  function grn {
    git reset --soft HEAD~"$1"
  }
  function gw {
    git stash
    git stash clear
  }
fi

if is_binary phpcs; then
  function php_lint {
    phpcs --standard="$1" "$2"
  }
fi

if is_binary phpcbf; then
  function php_fix {
    phpcbf --standard="$1" "$2"
  }
fi

if is_binary docker; then
  function docker_killall {
    docker kill "$(docker ps -q)"
  }
  alias ldocker='sudo $(which lazydocker)'
fi

if is_binary docker && is_binary lazydocker && is_binary podman; then
  alias lazypodman='DOCKER_HOST=unix:///run/user/1000/podman/podman.sock lazydocker'
fi

if is_binary bat; then
  function view_git_file {
    curl "$(echo "$1" | sed "s/github.com/raw.githubusercontent.com/g" | sed "s/\/blob\//\/refs\/heads\//g")" | bat -f -l "${1##*\.}"
  }
else
  function view_git_file {
    curl "$(echo "$1" | sed "s/github.com/raw.githubusercontent.com/g" | sed "s/\/blob\//\/refs\/heads\//g")" | cat
  }
fi

if is_binary eza; then
  alias ls='eza'
else
  alias ls='ls --color'
fi

if is_binary ss; then
  function pid_on_port {
    ss -lptn " sport = :$1"
  }
fi

if is_binary curl; then
  function color_swatches {
    curl -s "https://gist.githubusercontent.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263/raw/e50a28ec54188d2413518788de6c6367ffcea4f7/print256colours.sh" | bash
  }
fi

if is_binary nvim; then
  alias vim='nvim'
  alias vi='nvim'
  alias nano='nvim'
  alias ed='nvim'
  alias svim='nvim -u NONE'
fi

if is_binary tmux; then
  function tls {
    bash -c "tmux ls"
  }

  function ta {
    if [ -z "$1" ]; then
      tmux attach
    else
      tmux attach -t "$1"
    fi
  }
fi

if is_binary screen; then
  function tx {
    session_name="$(git symbolic-ref --short HEAD 2>/dev/null)"
    case $1 in
    l | ls)
      screen -ls
      ;;
    n | new)
      screen -S "$session_name"
      ;;
    j | join)
      screen -r "$session_name"
      ;;
    *)
      screen "$@"
      ;;
    esac
  }
fi

function handleize_files {
  for f in *\ *; do mv "$f" "${f// /_}"; done
  find . -maxdepth 1 -type f | while read -r upName; do
    loName=$(echo "${upName}" | tr '[:upper:]' '[:lower:]')
    mv "$upName" "$loName"
  done
}

function remove_suffix_files {
  for file in *"$1"; do mv "$file" "${file/1/""}"; done
}

function remove_prefix_files {
  for file in "$1"*; do mv "$file" "${file/1/""}"; done
}

function remove_middle_files {
  for file in *"$1"*; do mv "$file" "${file/1/""}"; done
}

if is_binary systemctl; then
  function kill_native_servers {
    if is_binary mysql; then
      sudo systemctl stop mysql
    fi
    if is_binary nginx; then
      sudo systemctl stop nginx
    fi
    if is_binary apache2; then
      sudo systemctl stop apache2
    fi
  }
fi

if is_binary uv; then
  function pysrc {
    if ! is_file "$PWD/venv/bin/activate"; then
      uv venv ./venv
    fi
    source "$PWD/venv/bin/activate"
  }
fi

function dunst_test {
  killall dunst
  notify-send foo
}
