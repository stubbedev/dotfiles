#!/usr/bin/env zsh
# shellcheck disable=SC1091

if is_binary php; then
  function art {
    if is_file "$PWD/artisan"; then
      php artisan "${@:1}"
    elif is_binary artisan; then
      artisan "${@:1}"
    else
      echo "No artisan on current PATH"
    fi
  }
fi

if is_binary git; then
  function gcm {
    in_git_repo

    local commit_prompt
    local commit_prefix=$(git branch --show-current |
      awk 'match($0, /[A-Z]+-[0-9]+/) { print substr($0, RSTART, RLENGTH) }')
    if [[ "$commit_prefix" = "" ]]; then
      commit_prompt="(Enter: commit message)> "
    else
      commit_prompt="(Enter: commit message [$commit_prefix])> "
    fi
    local commit_message=$(fzf --height=1 \
      --reverse \
      --no-info \
      --print-query \
      --prompt="$commit_prompt" </dev/null)

    if [[ "$commit_prefix" = "" ]]; then
      git commit -m "$commit_message"
    else
      git commit -m "$commit_prefix: $commit_message"
    fi
  }

  function gp {
    in_git_repo

    local banned_branches=(
      "develop"
      "staging"
      "production"
      "master"
      "main"
    )
    local branch_name=$(git branch --show-current)

    if [[ " ${banned_branches[@]} " =~ " ${branch_name} " ]]; then
      local choice=$(echo -e "No\nYes" |
        fzf \
          --no-input \
          --header="[WARN] Protected Branch: Confirm Push" \
          --height=2 \
          --no-info \
          --exit-0)

      if [[ "$choice" != "Yes" ]]; then
        return 0
      fi
    fi

    git branch --set-upstream-to="origin/$branch_name"
    git push origin "$branch_name"
  }
  function gcr {
    current_tag=$(git tag --sort=version:refname | awk '{print $1}' | tail -n 1)
    local increment_action=$(echo -e "Major\nMinor\nPatch" |
      fzf --prompt="(Enter: select action)> " \
        --height=3 \
        --no-input \
        --no-info)

    local major=$(echo "$current_tag" | grep -oP '^\d+')
    local minor=$(echo "$current_tag" | grep -oP '(?<=\.)\d+(?=\.)')
    local patch=$(echo "$current_tag" | grep -oP '\d+$')

    case $increment_action in
    "Major")
      major=$((major + 1))
      ;;
    "Minor")
      minor=$((minor + 1))
      ;;
    "Patch")
      patch=$((patch + 1))
      ;;
    *)
      return 0
      ;;
    esac
    local release_branch="$major.$minor.$patch"
    git checkout -b "release/$release_branch"
  }
  function gcb {
    in_git_repo

    local initial_query=""
    if [[ -n "$1" ]]; then
      initial_query="$1"
    fi

    local git_branches=$(git branch --all | awk '{print $1}')

    local branch_name=$(echo -e $git_branches |
      fzf --prompt="(Enter: checkout branch, Ctrl+C: create branch)> " \
        --query="$initial_query" \
        --bind 'enter:accept' \
        --select-1 \
        --exit-0 \
        --print-query \
        --no-info \
        --height=5 |
      tail -n1)

    if [[ -n "$branch_name" && $(echo -e $git_branches | grep -Fx "$branch_name") ]]; then
      branch_name=${branch_name#remotes/origin/}
      git checkout "$branch_name"
      return 0
    fi

    if [[ -z "$branch_name" ]]; then
      branch_name=$(fzf \
        --prompt="(Ticket Number: ABC-1234, Tag Number: 4.3.21)> " \
        --height=1 \
        --reverse \
        --no-info \
        --print-query |
        head -1)
    fi

    if [[ -z "$branch_name" ]]; then
      return 0
    fi

    local tag_mask="^[0-9]+\.[0-9]+\.[0-9]+$"
    if [[ $branch_name =~ $tag_mask ]]; then
      git checkout -b "release/$branch_name"
      return 0
    fi

    local branch_prefix=$(echo -e "feature\nbugfix\nhotfix" |
      fzf --prompt="(Enter: select prefix)> " \
        --height=3 \
        --no-input \
        --no-info)

    local new_branch_name
    local branch_suffix=$(fzf \
      --height=1 \
      --reverse \
      --no-info \
      --print-query \
      --prompt="(Enter: select suffix)> " </dev/null |
      head -1)

    if [[ -n "$branch_suffix" ]]; then
      branch_suffix=$(echo "$branch_suffix" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')
      new_branch_name="$branch_prefix/$branch_name-$branch_suffix"
    else
      new_branch_name="$branch_prefix/$branch_name"
    fi

    if [[ "$new_branch_name" != "/" ]]; then
      git checkout -b "$new_branch_name"
    fi
  }

  function ga {
    in_git_repo

    local untracked_files=$(git status --porcelain | grep "??" | awk '{print $2}')
    local tracked_files=$(git status --porcelain | awk '/^.M|^MM/ {print $2}' | sort -u)
    local deleted_files=$(git status --porcelain | awk '/^R.M/ {print $2}')

    if [[ -n "$tracked_files" ]]; then
      local tracked_selected=$(printf "%s\n" $tracked_files | fzf --multi \
        --preview='git diff --color=always {} | bat --style=numbers --color=always' \
        --preview-window='up:90%:wrap:nohidden' \
        --prompt="(Tab: toggle file, Shift+Tab: toggle all files, Enter: submit selection, Ctrl+C: cancel selection)> " \
        --header="Add tracked files" \
        --bind 'shift-tab:toggle-all' \
        --bind "tab:toggle" \
        --bind 'enter:transform:[[ $FZF_SELECT_COUNT -gt 0 ]] && echo accept || echo abort' \
        --no-info \
        --exit-0)

      if [[ -n "$tracked_selected" ]]; then
        local tracked_selection=($(echo "$tracked_selected" | awk '{for(i=1; i<=NF; i++) print $i}'))
        for file in "${tracked_selection[@]}"; do
          git add "$file" -p
        done
      fi
    fi

    if [[ -n "$deleted_files" ]]; then
      local deleted_selected=$(printf "%s\n" $deleted_files |
        fzf --multi \
          --preview='bat --style=numbers --color=always {}' \
          --preview-window='up:90%:wrap:nohidden' \
          --prompt="(Tab: toggle file, Shift+Tab: toggle all files, Enter: submit selection, Ctrl+C: cancel selection)> " \
          --header="Add deleted files" \
          --bind 'shift-tab:toggle-all' \
          --bind "tab:toggle" \
          --bind 'enter:transform:[[ $FZF_SELECT_COUNT -gt 0 ]] && echo accept || echo abort' \
          --no-info \
          --exit-0)

      if [[ -n "$deleted_selected" ]]; then
        local deleted_selection=($(echo "$deleted_selected" | awk '{for(i=1; i<=NF; i++) print $i}'))
        for file in "${deleted_selection[@]}"; do
          git add "$file"
        done
      fi
    fi

    if [[ -n "$untracked_files" ]]; then
      local untracked_selected=$(printf "%s\n" $untracked_files |
        fzf --multi \
          --preview='bat --style=numbers --color=always {}' \
          --preview-window='up:90%:wrap:nohidden' \
          --prompt="(Tab: toggle file, Shift+Tab: toggle all files, Enter: submit selection, Ctrl+C: cancel selection)> " \
          --header="Add untracked files" \
          --bind 'shift-tab:toggle-all' \
          --bind "tab:toggle" \
          --bind 'enter:transform:[[ $FZF_SELECT_COUNT -gt 0 ]] && echo accept || echo abort' \
          --no-info \
          --exit-0)

      if [[ -n "$untracked_selected" ]]; then
        local untracked_selection=($(echo "$untracked_selected" | awk '{for(i=1; i<=NF; i++) print $i}'))
        for file in "${untracked_selection[@]}"; do
          git add "$file"
        done
      fi
    fi
  }

  function gsd {
    git diff
  }

  function gd {
    in_git_repo

    local initial_query=""
    if [[ -n "$1" ]]; then
      initial_query="$1"
    fi

    local current_branch=$(git branch --show-current)
    local git_branches=$(git branch --all | awk '{print $1}')
    local remote_branch=$(echo -e $git_branches |
      fzf --prompt="(Enter: select comparison branch)> " \
        --query="$initial_query" \
        --select-1 \
        --exit-0 \
        --print-query \
        --no-info \
        --height=5 |
      tail -n1)

    git diff $current_branch..$remote_branch --color
  }
  function gst {
    git status
  }
  function gg {
    in_git_repo

    local current_branch=$(git branch --show-current)
    git branch --set-upstream-to="origin/$current_branch"
    git pull
  }
  function gga {
    in_git_repo

    local current_branch=$(git branch --show-current)
    git branch --set-upstream-to="origin/$current_branch"
    git pull --all
  }
  function gf {
    git fetch
  }
  function gfa {
    git fetch --all
  }
  function ghr {
    git reset --hard HEAD~
  }
  function ghrn {
    git reset --hard HEAD~"$1"
  }
  function gr {
    git reset --soft HEAD~
  }
  function grn {
    git reset --soft HEAD~"$1"
  }
  function gsa {
    git stash
  }
  function gw {
    git stash && git stash clear
  }
  function in_git_repo {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      return 0
    fi
  }

fi

if is_binary bat; then
  function view_git_file {
    curl "$(echo "$1" | sed "s/github.com/raw.githubusercontent.com/g" | sed "s/\/blob\//\/refs\/heads\//g")" | bat -f -l "${1##*\.}"
  }

  function batshebang {
    local file="$1"
    shift

    if [[ "$file" == *.* ]]; then
      bat "$file" "$@"
      return
    fi

    if [[ ! -r "$file" ]]; then
      bat "$file" "$@"
      return
    fi

    local firstline=$(head -n 1 "$file")

    if [[ "$firstline" == \#\!* ]]; then
      local interpreter=$(echo "$firstline" | awk '{print $NF}')
      local language=""

      interpreter=$(basename "$interpreter")

      case "$interpreter" in
      python* | python2 | python3) language="python" ;;
      ruby) language="ruby" ;;
      perl) language="perl" ;;
      bash | sh | zsh | ksh) language="bash" ;;
      node | nodejs) language="javascript" ;;
      php) language="php" ;;
      R) language="r" ;;
      lua) language="lua" ;;
      *) language="" ;; # Fall back to bat's auto-detection
      esac

      if [[ -n "$language" ]]; then
        bat --language="$language" "$file" "$@"
      else
        bat "$file" "$@"
      fi
    else
      bat "$file" "$@"
    fi
  }

else
  function view_git_file {
    curl "$(echo "$1" | sed "s/github.com/raw.githubusercontent.com/g" | sed "s/\/blob\//\/refs\/heads\//g")" | cat
  }
fi

if is_binary ss; then
  function pid_on_port {
    ss -lptn " sport = :$1"
  }
fi

if is_binary uv; then
  function pysrc {
    if ! is_file "$PWD/venv/bin/activate"; then
      uv venv ./venv
    fi
    is_file "$PWD/venv/bin/activate" && source "$PWD/venv/bin/activate"
  }
fi

if is_binary fzf; then
  function fzf-project-picker {
    cd $(find ~/git -maxdepth 3 -mindepth 1 -type d -exec test -d '{}/.git' \; -print 2>/dev/null | fzf)
    clear
  }
fi

if is_binary nala; then
  function npt {
    case "$1" in
    [iI] | [iI]nstall)
      sudo nala install "${@:2}"
      ;;
    [uU] | [uU]pdate)
      sudo nala update "${@:2}"
      ;;
    [uU]g | [uU]pgrade)
      sudo nala upgrade "${@:2}"
      ;;
    [sS] | [sS]earch)
      sudo nala search "${@:2}"
      ;;
    [rR] | [rR]emove)
      sudo nala remove "${@:2}"
      ;;
    l | ls | list)
      sudo nala list --installed
      ;;
    [hH] | [hH]elp)
      nala --help
      ;;
    *)
      sudo nala "${@}"
      ;;
    esac
  }
fi

if is_binary pacstall; then
  function pt {
    case "$1" in
    [iI] | [iI]nstall)
      sudo pacstall -I "${@:2}"
      ;;
    [uU] | [uU]pdate)
      sudo pacstall -U "${@:2}"
      ;;
    [uU]g | [uU]pgrade)
      sudo pacstall -Up "${@:2}"
      ;;
    [sS] | [sS]earch)
      sudo pacstall -S "${@:2}"
      ;;
    [rR] | [rR]emove)
      sudo pacstall -R "${@:2}"
      ;;
    l | ls | list)
      sudo pacstall -L
      ;;
    [hH] | [hH]help)
      pacstall -h
      ;;
    *)
      sudo pacstall "${@}"
      ;;
    esac
  }
fi

if is_binary bat; then
  function view_git_file {
    curl "$(echo "$1" | sed "s/github.com/raw.githubusercontent.com/g" | sed "s/\/blob\//\/refs\/heads\//g")" | bat -f -l "${1##*\.}"
  }
else
  function view_git_file {
    curl "$(echo "$1" | sed "s/github.com/raw.githubusercontent.com/g" | sed "s/\/blob\//\/refs\/heads\//g")" | cat
  }
fi

if is_binary ss; then
  function pid_on_port {
    ss -lptn " sport = :$1"
  }
fi

if is_binary uv; then
  function pysrc {
    if ! is_file "$PWD/venv/bin/activate"; then
      uv venv ./venv
    fi
    is_file "$PWD/venv/bin/activate" && source "$PWD/venv/bin/activate"
  }
fi

if is_binary fzf; then
  function fzf-project-picker {
    cd $(find ~/git -maxdepth 3 -mindepth 1 -type d -exec test -d '{}/.git' \; -print 2>/dev/null | fzf)
    clear
  }
fi

if are_binary fzf expressvpn; then
  function expressvpn_wrapper {
    echo "WIP"
  }
fi
